# !DEPRECATED
# Snakefile: mapping_bwa_mem.rules
# rule for Snakemake
# jiucheng
# 2020-11-20

configfile: "./configs/project_config.yaml"

bwa = config["biosoft"]["bwa"]
samtools = config["biosoft"]["samtools"]
hg19 = config["database"]["reference"]
fq_path = config["core"]["sample_fold_path"]
sample = config["samples"]
project = config["core"]["project_path"]
fastp = config["biosoft"]["fastp"]
gatk = config["biosoft"]["gatk"]

rule all:
    input:
        expand(project +"/{sample}/{sample}_mkdup.bam", sample = config["samples"])


def get_paired_end_fq(wildcards):
    fq = config["samples"][wildcards.sample]
    l = [fq_path + f"/{i}" for i in fq]
    return l

rule remove_adaptor:
    input:
        fq = get_paired_end_fq
    output:
        out_fq1 = "{project}/{sample}/{sample}_trim_1.fq.gz",
        out_fq2 = "{project}/{sample}/{sample}_trim_2.fq.gz"
    params:
        threads = 16,
        refix = "{project}/{sample}/{sample}"
    message: "Executing bwa mem align on the following files {input}."
    log:
        "{project}/{sample}/{sample}.qc.log"
    shell:
        """{fastp} -i {input.fq[0]} -I {input.fq[1]} -o {output.out_fq1} -O {output.out_fq2} -c -w {params.threads} \\
            -h {params.refix}.html -j {params.refix}.json > {log} 2>&1"""


rule bwa_map:
    input:
        rules.remove_adaptor.output
    output:
        "{project}/{sample}/{sample}.sam.gz"
    params:
        rg=r"@RG\tID:{sample}\tLB:DNA\tSM:{sample}\tPL:ILLUMINA",
        threads = 64
    log:
        "{project}/{sample}/{sample}.align.log"
    shell:
        "bwa mem -t {params.threads} -R '{params.rg}' -M {hg19} {input} 2>{log} | gzip > {output} "

rule sam_to_bam:
    input:
        rules.bwa_map.output
    output:
        temp("{project}/{sample}/{sample}.sam.tmp")
    params:
        threads = 64
    shell:
        "{samtools} view -@ {params.threads} -Sb {input} > {output}"

rule sort_bam:
    input:
        rules.sam_to_bam.output
    output:
        "{project}/{sample}/{sample}.bam"
    params:
        threads = 64
    shell:
        "{samtools} sort -@ {params.threads} -T {wildcards.sample} -O bam {input} > {output}"

rule mark_dup:
    input:
        rules.sort_bam.output
    output:
        "{project}/{sample}/{sample}_mkdup.bam"
    log:
        "{project}/{sample}/{sample}.mkdup.log",
    shell:
        """{gatk} MarkDuplicates \\
                -I {input} \\
                -O {output} \\
                -M {project}/{wildcards.sample}/{wildcards.sample}_dup_metrics.txt > {log} 2>&1\\
           && {gatk} BuildBamIndex \\
                -I {output} > /dev/null 2>&1
        """

